name: Publish to npm

on:
  push:
    branches:
      - main

jobs:
  auto-publish:
    runs-on: ubuntu-latest

    steps:
      # Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push tags

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Check if package.json changed
      - name: Check package.json changes
        id: check_changes
        run: |
          git fetch origin main
          if git diff --name-only HEAD origin/main | grep -q 'package.json'; then
            echo "package.json changed"
            echo "publish=true" >> $GITHUB_OUTPUT
          else
            echo "package.json not changed"
            echo "publish=false" >> $GITHUB_OUTPUT
          fi

      # Bump version safely
      - name: Bump version
        if: steps.check_changes.outputs.publish == 'true'
        id: bump_version
        run: |
          # Bump patch version without git tag (avoids "working directory not clean")
          npm version patch --no-git-tag-version

          # Commit and create tag manually
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "Automated release v$(node -p "require('./package.json').version")"
          git tag v$(node -p "require('./package.json').version")
          git push origin main --follow-tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Build package
      - name: Build
        if: steps.check_changes.outputs.publish == 'true'
        run: npm run build

      # Publish to npm
      - name: Publish to npm
        if: steps.check_changes.outputs.publish == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
